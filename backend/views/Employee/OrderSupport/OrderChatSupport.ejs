<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Support Chat Support - Design Excellence</title>
    <link rel="stylesheet" href="/css/Employee/Admin/AdminIndexStyles.css">
    <link rel="stylesheet" href="/css/dark-mode.css">
    <style>
      .chat-support-container { display: flex; height: 80vh; background: #f7f7f7; border-radius: 8px; overflow: hidden; }
      .chat-thread-list { width: 340px; background: #fff; border-right: 1px solid #eee; display: flex; flex-direction: column; }
      .chat-search-bar { padding: 16px; border-bottom: 1px solid #eee; display: flex; justify-content: center; align-items: center; }
      .chat-search-input { width: 90%; max-width: 260px; padding: 8px 12px; border-radius: 6px; border: 1px solid #ccc; display: block; margin: 0 auto; }
      .chat-thread-items { flex: 1; overflow-y: auto; }
      .chat-thread-item { padding: 14px 18px; border-bottom: 1px solid #f2f2f2; cursor: pointer; display: flex; align-items: center; justify-content: space-between; background: #fff; transition: background 0.15s; }
      .chat-thread-item.active { background: #f0f0f0; }
      .chat-thread-item.unread { font-weight: bold; }
      .chat-thread-info { flex: 1; }
      .chat-thread-name { font-size: 1.05em; }
      .chat-thread-last { color: #888; font-size: 0.95em; margin-top: 2px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
      .chat-thread-unread { background: #e74c3c; color: #fff; border-radius: 12px; font-size: 0.85em; padding: 2px 8px; margin-left: 8px; }
      .chat-conversation { flex: 1; display: flex; flex-direction: column; max-width: 1400px; min-width: 0; margin: 0 auto; }
      .chat-conversation-header { padding: 18px 24px; border-bottom: 1px solid #eee; background: #fff; font-weight: 600; font-size: 1.1em; }
      .chat-messages-area { flex: 1; padding: 24px; overflow-y: auto; background: #e5e7eb; }
      .chat-message-row { margin-bottom: 16px; display: flex; }
      .chat-message-row.admin { justify-content: flex-end; }
      .chat-message-bubble { max-width: 60%; padding: 10px 16px; border-radius: 16px; font-size: 1em; background: #F0B21B; color: #2c3e50; box-shadow: 0 1px 4px rgba(0,0,0,0.04); }
      .chat-message-row.customer .chat-message-bubble { background: #fffbe6; color: #2c3e50; border-bottom-left-radius: 4px; }
      .chat-message-row.admin .chat-message-bubble { background: #F0B21B; color: #2c3e50; border-bottom-right-radius: 4px; }
      .chat-reply-area { padding: 18px 24px; border-top: 1px solid #eee; background: #fff; display: flex; }
      .chat-reply-input { flex: 1; border-radius: 16px; border: 1px solid #ccc; padding: 10px 16px; font-size: 1em; margin-right: 12px; }
      .chat-reply-btn { background: #F0B21B; color: #2c3e50; border: none; border-radius: 16px; padding: 10px 24px; font-weight: 600; cursor: pointer; }

      /* Custom Confirmation Modal Styles */
      .modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-color: rgba(0, 0, 0, 0.5);
          display: flex;
          justify-content: center;
          align-items: center;
          z-index: 1000;
          visibility: hidden;
          opacity: 0;
          transition: visibility 0s, opacity 0.3s ease;
      }
      .modal-overlay.show {
          visibility: visible;
          opacity: 1;
      }
      .modal-content {
          background-color: #fff;
          padding: 30px;
          border-radius: 8px;
          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
          text-align: center;
          max-width: 400px;
          width: 90%;
          transform: scale(0.9);
          transition: transform 0.3s ease;
      }
      .modal-overlay.show .modal-content {
          transform: scale(1);
      }
      .modal-content h3 {
          margin-top: 0;
          color: #333;
          font-size: 1.5em;
          margin-bottom: 20px;
      }
      .modal-content p {
          color: #555;
          font-size: 1.1em;
          margin-bottom: 30px;
      }
      .modal-buttons {
          display: flex;
          justify-content: center;
          gap: 15px;
      }
      .modal-button {
          padding: 12px 25px;
          border: none;
          border-radius: 5px;
          cursor: pointer;
          font-size: 1em;
          font-weight: bold;
          transition: background-color 0.3s, color 0.3s;
      }
      .modal-button.confirm {
          background-color: #dc3545;
          color: white;
      }
      .modal-button.confirm:hover {
          background-color: #c82333;
      }
      .modal-button.cancel {
          background-color: #f0f0f0;
          color: #555;
          border: 1px solid #ccc;
      }
      .modal-button.cancel:hover {
          background-color: #e0e0e0;
      }
      .sidebar {
          display: flex;
          flex-direction: column;
          height: 100vh;
      }
      .sidebar-menu {
          flex-grow: 1;
      }
      .logout-section {
          padding: 40px;
          border-top: 1px solid #ddd;
          margin-top: auto;
          text-align: center;
      }
      .logout-button {
          display: inline-block;
          width: auto;
          padding: 12px 25px;
          background-color: #dc3545;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          text-align: center;
          text-decoration: none;
          font-weight: bold;
          transition: background-color 0.3s;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      }
      .logout-button:hover {
          background-color: #c82333;
      }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>Order Support Panel</h3>
            </div>
            <ul class="sidebar-menu">
                <li><a href="/Employee/OrderSupport">Dashboard</a></li>
                <li class="sidebar-section-label">Order</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/OrderSupport/OrderProducts">Products</a></li>
                    <li><a href="/Employee/OrderSupport/OrderVariations">Variations</a></li>
                    <li><a href="/Employee/OrderSupport/OrderMaterials">Raw Materials</a></li>
                    <li><a href="/Employee/OrderSupport/OrderAlerts">Alerts</a></li>
                    <li><a href="/Employee/OrderSupport/OrderArchived">Archived items</a></li>
                </ul>
                <li class="sidebar-section-label">Transactions</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/OrderSupport/OrderRates">Delivery Rates</a></li>
                    <li><a href="/Employee/OrderSupport/OrderWalkIn">Walk In</a></li>
                    <li><a href="/Employee/OrderSupport/OrderOrdersPending">Pending Orders</a></li>
                    <li><a href="/Employee/OrderSupport/OrderOrdersProcessing">In Process</a></li>
                    <li><a href="/Employee/OrderSupport/OrderOrdersShipping">Shipping</a></li>
                    <li><a href="/Employee/OrderSupport/OrderOrdersDelivery">On Delivery</a></li>
                    <li><a href="/Employee/OrderSupport/OrderOrdersReceive">To Receive</a></li>
                    <li><a href="/Employee/OrderSupport/OrderCancelledOrders">Cancelled Orders</a></li>
                    <li><a href="/Employee/OrderSupport/OrderCompletedOrders">Completed Orders</a></li>
                </ul>
                <!-- User Management Section -->
                <li class="sidebar-section-label" style="font-weight:normal;">User Management</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/OrderSupport/OrderManageUsers">Manage Users</a></li>
                </ul>
                
                <!-- Customer Reviews Section -->
                <li class="sidebar-section-label" style="font-weight:normal;">Customer Reviews</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/OrderSupport/OrderReviews">Reviews</a></li>
                </ul>
                
                <!-- Support & Communication Section -->
                <li class="sidebar-section-label" style="font-weight:normal;">Support & Communication</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/OrderSupport/OrderChatSupport">Chat Support</a></li>
                </ul>
                
                <!-- Content & System Section -->
                <li class="sidebar-section-label" style="font-weight:normal;">Content & System</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/OrderSupport/OrderCMS">Content Management</a></li>
                    <li><a href="/Employee/OrderSupport/OrderLogs">Activity Logs</a></li>
                </ul>
            </ul>
            <div class="logout-section">
                <a href="/logout" class="logout-button" onclick="handleLogout(event)">Logout</a>
            </div>
        </div>
        <div class="main-content">
            <div class="header">
                <h2>Chat Support</h2>
            </div>
            <div class="content-area">
              <div class="chat-support-container">
                <!-- Left: Thread List -->
                <div class="chat-thread-list">
                  <div class="chat-search-bar">
                    <input class="chat-search-input" type="text" placeholder="Search..." />
                  </div>
                  <div class="chat-thread-items">
                    <% if (threads && threads.length) { %>
                      <% threads.forEach(function(thread) { %>
                        <div class="chat-thread-item<%= selectedThread && selectedThread.CustomerID === thread.CustomerID ? ' active' : '' %><%= thread.UnreadCount > 0 ? ' unread' : '' %>" data-customer-id="<%= thread.CustomerID %>">
                          <div class="chat-thread-info">
                            <div class="chat-thread-name"><%= thread.FullName %></div>
                            <div class="chat-thread-last"><%= thread.LastMessageText %></div>
                          </div>
                          <% if (thread.UnreadCount > 0) { %>
                            <span class="chat-thread-unread"><%= thread.UnreadCount %></span>
                          <% } %>
                        </div>
                      <% }); %>
                    <% } else { %>
                      <div style="padding: 24px; color: #888;">No chats yet.</div>
                    <% } %>
                  </div>
                </div>
                <!-- Right: Conversation -->
                <div class="chat-conversation">
                  <% if (selectedThread) { %>
                    <div class="chat-conversation-header">
                      <%= selectedThread.FullName %> &lt;<%= selectedThread.Email %>&gt;
                      <button id="reload-messages-btn" style="float:right; margin-left:16px; padding:4px 14px; border-radius:8px; border:none; background:#F0B21B; color:#2c3e50; font-weight:600; cursor:pointer;">Reload</button>
                    </div>
                    <div class="chat-messages-area">
                      <% if (messages && messages.length) { %>
                        <% messages.forEach(function(msg) { %>
                          <div class="chat-message-row <%= msg.SenderType === 'support' ? 'admin' : 'customer' %>">
                            <div class="chat-message-bubble"><%= msg.MessageText %></div>
                          </div>
                        <% }); %>
                      <% } else { %>
                        <div style="color: #888;">No messages yet.</div>
                      <% } %>
                    </div>
                    <form class="chat-reply-area" id="chat-reply-form" autocomplete="off">
                      <input class="chat-reply-input" id="chat-reply-input" type="text" placeholder="Type your reply..." autocomplete="off" />
                      <button class="chat-reply-btn" type="submit">Send</button>
                    </form>
                  <% } else { %>
                    <div class="chat-conversation-header">Select a chat to view conversation</div>
                  <% } %>
                </div>
              </div>
            </div>
        </div>
    </div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('chat-reply-form');
    const input = document.getElementById('chat-reply-input');
    const customerId = "<%= selectedThread ? selectedThread.CustomerID : '' %>";
    const customerIdNumber = parseInt(customerId);
    const reloadBtn = document.getElementById('reload-messages-btn');
    const messagesArea = document.querySelector('.chat-messages-area');

    // Debug logging
    console.log('ChatSupport Debug Info:');
    console.log('- selectedThread object:', '<%= JSON.stringify(selectedThread) %>');
    console.log('- selectedThread type:', '<%= typeof selectedThread %>');
    console.log('- selectedThread.CustomerID:', '<%= selectedThread ? selectedThread.CustomerID : "null" %>');
    console.log('- customerId:', customerId);
    console.log('- customerIdNumber:', customerIdNumber);
    console.log('- form exists:', !!form);
    console.log('- reloadBtn exists:', !!reloadBtn);
    console.log('- messagesArea exists:', !!messagesArea);

    // Only setup form if a thread is selected
    if (form && customerIdNumber && !isNaN(customerIdNumber)) {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        const message = input.value.trim();
        if (!message) return;
        const res = await fetch(`/api/support/chat/messages/${customerId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ message })
        });
        const data = await res.json();
        if (data.success) {
          fetchMessagesAndUpdate(); // Just refresh messages, don't reload page
          input.value = '';
        } else {
          console.error('Send message error:', data);
          alert('Failed to send message: ' + (data.message || 'Unknown error'));
        }
      });
    } else if (!customerIdNumber || isNaN(customerIdNumber)) {
      console.log('No chat thread selected - form setup skipped');
    } else {
      console.warn('Chat reply form not found in DOM');
    }

    async function fetchMessagesAndUpdate() {
      if (!customerIdNumber || isNaN(customerIdNumber)) return;
      if (!messagesArea) {
        console.warn('Messages area not found in DOM');
        return;
      }
      const res = await fetch(`/api/support/chat/messages/${customerId}`);
      const data = await res.json();
      if (data.success && Array.isArray(data.messages)) {
        let html = '';
        if (data.messages.length === 0) {
          html = '<div style="color: #888;">No messages yet.</div>';
        } else {
          data.messages.forEach(function(msg) {
            const rowClass = msg.IsFromCustomer ? 'customer' : 'admin';
            const messageText = msg.Message || msg.MessageText || 'No message content';
            html += `<div class="chat-message-row ${rowClass}"><div class="chat-message-bubble">${messageText}</div></div>`;
          });
        }
        messagesArea.innerHTML = html;
        messagesArea.scrollTop = messagesArea.scrollHeight;
      } else {
        console.error('Failed to fetch messages:', data);
        messagesArea.innerHTML = '<div style="color: #dc3545;">Failed to load messages: ' + (data.message || 'Unknown error') + '</div>';
      }
    }
    // Only setup polling and reload button if a thread is selected
    if (customerIdNumber && !isNaN(customerIdNumber)) {
      // Polling every 2 seconds
      setInterval(fetchMessagesAndUpdate, 2000);
      // Manual reload button
      if (reloadBtn) {
        reloadBtn.addEventListener('click', fetchMessagesAndUpdate);
      } else {
        console.warn('Reload button not found in DOM');
      }
    } else {
      console.log('No chat thread selected - polling and reload button setup skipped');
    }

    // Setup click handlers for chat thread items
    const threadItems = document.querySelectorAll('.chat-thread-item');
    threadItems.forEach(function(item) {
      item.addEventListener('click', function() {
        const customerId = this.getAttribute('data-customer-id');
        if (customerId) {
          // Redirect to the same page with the selected thread
          window.location.href = `/Employee/OrderSupport/OrderChatSupport?thread=${customerId}`;
        }
      });
    });
  });
</script>

<!-- Custom Confirmation Modal -->
<div id="logoutConfirmModal" class="modal-overlay">
    <div class="modal-content">
        <h3>Confirm Logout</h3>
        <p>Are you sure you want to log out?</p>
        <div class="modal-buttons">
            <button class="modal-button confirm" id="confirmLogoutBtn">Logout</button>
            <button class="modal-button cancel" id="cancelLogoutBtn">Cancel</button>
        </div>
    </div>
</div>

<script>
    // Custom Logout Modal Logic
    const logoutConfirmModal = document.getElementById('logoutConfirmModal');
    const confirmLogoutBtn = document.getElementById('confirmLogoutBtn');
    const cancelLogoutBtn = document.getElementById('cancelLogoutBtn');

    async function handleLogout(event) {
        event.preventDefault();
        logoutConfirmModal.classList.add('show');
    }

    confirmLogoutBtn.addEventListener('click', async () => {
        logoutConfirmModal.classList.remove('show');
        try {
            const response = await fetch('/logout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                window.location.href = '/login';
            } else {
                console.error('Logout failed');
                alert('Failed to logout. Please try again.');
            }
        } catch (error) {
            console.error('Error during logout:', error);
            alert('An error occurred during logout. Please try again.');
        }
    });

    cancelLogoutBtn.addEventListener('click', () => {
        logoutConfirmModal.classList.remove('show');
    });

    // Close modal if clicked outside content
    logoutConfirmModal.addEventListener('click', (event) => {
        if (event.target === logoutConfirmModal) {
            logoutConfirmModal.classList.remove('show');
        }
    });
</script>
        <script src="/js/dark-mode.js"></script>
</body>
</html>





