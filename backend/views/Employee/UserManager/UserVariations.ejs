<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Manager Product Variations - Design Excellence</title>
    <link rel="stylesheet" href="/css/Employee/Admin/AdminIndexStyles.css">
    <link rel="stylesheet" href="/css/dark-mode.css">
    <style>
        /* Custom Confirmation Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            visibility: hidden;
            opacity: 0;
            transition: visibility 0s, opacity 0.3s ease;
        }
        .modal-overlay.show {
            visibility: visible;
            opacity: 1;
        }
        .modal-content {
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            text-align: center;
            max-width: 400px;
            width: 90%;
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }
        .modal-overlay.show .modal-content {
            transform: scale(1);
        }
        .modal-content h3 {
            margin-top: 0;
            color: #333;
            font-size: 1.5em;
            margin-bottom: 20px;
        }
        .modal-content p {
            color: #555;
            font-size: 1.1em;
            margin-bottom: 30px;
        }
        .modal-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
        }
        .modal-button {
            padding: 12px 25px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            font-weight: bold;
            transition: background-color 0.3s, color 0.3s;
        }
        .modal-button.confirm {
            background-color: #dc3545;
            color: white;
        }
        .modal-button.confirm:hover {
            background-color: #c82333;
        }
        .modal-button.cancel {
            background-color: #f0f0f0;
            color: #555;
            border: 1px solid #ccc;
        }
        .modal-button.cancel:hover {
            background-color: #e0e0e0;
        }
        .sidebar {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        .sidebar-menu {
            flex-grow: 1;
        }
        .logout-section {
            padding: 40px;
            border-top: 1px solid #ddd;
            margin-top: auto;
            text-align: center;
        }
        .logout-button {
            display: inline-block;
            width: auto;
            padding: 12px 25px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-align: center;
            text-decoration: none;
            font-weight: bold;
            transition: background-color 0.3s;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        .logout-button:hover {
            background-color: #c82333;
        }
    </style>
    <style>
        .variations-container {
            padding: 20px;
        }
        
        .variations-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e9ecef;
        }
        
        .variations-header h2 {
            margin: 0;
            color: #333;
        }
        
        .add-variation-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.3s;
        }
        
        .add-variation-btn:hover {
            background: #218838;
        }
        
        .product-selector {
            margin-bottom: 20px;
        }
        
        .product-selector select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }
        
        .variations-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .variations-table th,
        .variations-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }
        
        .variations-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #495057;
        }
        
        .variations-table tr:hover {
            background: #f8f9fa;
        }
        
        .variation-image {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 5px;
        }
        
        .variation-actions {
            display: flex;
            gap: 5px;
        }
        
        .btn-edit, .btn-delete {
            padding: 5px 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s;
        }
        
        .btn-edit {
            background: #007bff;
            color: white;
        }
        
        .btn-edit:hover {
            background: #0056b3;
        }
        
        .btn-delete {
            background: #dc3545;
            color: white;
        }
        
        .btn-delete:hover {
            background: #c82333;
        }
        
        .no-variations {
            text-align: center;
            padding: 40px;
            color: #6c757d;
            font-style: italic;
        }
        
        /* Modal Styles - Simplified like Raw Materials */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: #fff;
            margin: 5% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }
        
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            line-height: 1;
        }
        
        .close-button:hover {
            color: #000;
        }
        
        .modal-content h3 {
            margin-top: 0;
            margin-bottom: 20px;
            color: #333;
        }
        
        .modal-content label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #333;
        }
        
        .modal-content input,
        .modal-content select {
            width: 100%;
            padding: 8px 12px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            box-sizing: border-box;
        }
        
        .modal-content input:focus,
        .modal-content select:focus {
            outline: none;
            border-color: #FFC107;
            box-shadow: 0 0 5px rgba(255, 193, 7, 0.3);
        }
        
        .modal-content button {
            background-color: #FFC107;
            color: #333;
            border: none;
            border-radius: 4px;
            padding: 10px 20px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            margin-right: 10px;
            transition: background-color 0.3s;
        }
        
        .modal-content button:hover {
            background-color: #e0ac06;
        }
        
        .modal-content button[type="button"] {
            background-color: #6c757d;
            color: white;
        }
        
        .modal-content button[type="button"]:hover {
            background-color: #5a6268;
        }
        
        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
            border: 1px solid #f5c6cb;
        }
        
        .success-message {
            background: #d4edda;
            color: #155724;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
            border: 1px solid #c3e6cb;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: #6c757d;
        }

        /* Custom Delete Confirmation Modal */
        .delete-confirmation-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .delete-confirmation-content {
            background-color: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            width: 90%;
            max-width: 400px;
            text-align: center;
            animation: fadeIn 0.3s ease-out;
        }

        .delete-confirmation-content h3 {
            color: #333;
            margin-top: 0;
            margin-bottom: 15px;
            font-size: 1.5em;
        }

        .delete-confirmation-content p {
            color: #666;
            margin-bottom: 20px;
            font-size: 1.1em;
        }

        .delete-confirmation-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        .delete-confirmation-buttons button {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1em;
            transition: background-color 0.3s ease;
        }

        .delete-confirm-btn {
            background-color: #dc3545;
            color: white;
        }

        .delete-confirm-btn:hover {
            background-color: #c82333;
        }

        .delete-cancel-btn {
            background-color: #6c757d;
            color: white;
        }

        .delete-cancel-btn:hover {
            background-color: #5a6268;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: scale(0.95);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>User Manager Panel</h3>
            </div>
            <ul class="sidebar-menu">
                <li><a href="/Employee/UserManager">Dashboard</a></li>
                <li class="sidebar-section-label" style="font-weight:normal;">Inventory</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/UserManager/UserProducts">Products</a></li>
                    <li><a href="/Employee/UserManager/UserVariations" class="active">Variations</a></li>
                    <li><a href="/Employee/UserManager/UserMaterials">Raw Materials</a></li>
                    <li><a href="/Employee/UserManager/UserAlerts">Alerts</a></li>
                    <li><a href="/Employee/UserManager/UserArchived">Archived items</a></li>
                </ul>
                <li class="sidebar-section-label" style="font-weight:normal;">Transactions</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/UserManager/UserRates">Delivery Rates</a></li>
                    <li><a href="/Employee/UserManager/UserWalkIn">Walk In</a></li>
                    <li><a href="/Employee/UserManager/UserOrdersPending">Orders Pending</a></li>
                    <li><a href="/Employee/UserManager/UserOrdersProcessing">Orders Processing</a></li>
                    <li><a href="/Employee/UserManager/UserOrdersShipping">Orders Shipping</a></li>
                    <li><a href="/Employee/UserManager/UserOrdersDelivery">Orders Delivery</a></li>
                    <li><a href="/Employee/UserManager/UserOrdersReceive">Orders Receive</a></li>
                    <li><a href="/Employee/UserManager/UserCancelledOrders">Cancelled Orders</a></li>
                    <li><a href="/Employee/UserManager/UserCompletedOrders">Completed Orders</a></li>
                </ul>
                <!-- User Management Section -->
                <li class="sidebar-section-label" style="font-weight:normal;">User Management</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/UserManager/UserManageUsers">Manage Users</a></li>
                </ul>
                
                <!-- Customer Reviews Section -->
                <li class="sidebar-section-label" style="font-weight:normal;">Customer Reviews</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/UserManager/UserReviews">Reviews</a></li>
                </ul>
                
                <!-- Support & Communication Section -->
                <li class="sidebar-section-label" style="font-weight:normal;">Support & Communication</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/UserManager/UserChatSupport">Chat Support</a></li>
                </ul>
                
                <!-- Content & System Section -->
                <li class="sidebar-section-label" style="font-weight:normal;">Content & System</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/UserManager/UserCMS">Content Management</a></li>
                    <li><a href="/Employee/UserManager/UserLogs">Activity Logs</a></li>
                </ul>
            </ul>
            <div class="logout-section">
                <a href="/logout" class="logout-button" onclick="handleLogout(event)">Logout</a>
            </div>
        </div>
        <div class="main-content">
            <div class="variations-container">
                <div class="variations-header">
                    <h2>Product Variations Management</h2>
                    <button class="add-variation-btn" onclick="openAddModal()">Add New Variation</button>
                </div>
                
                <div class="product-selector">
                    <label for="productSelect">Select Product:</label>
                    <select id="productSelect" onchange="loadVariations()">
                        <option value="">Choose a product...</option>
                    </select>
                </div>
                
                <div id="variationsContent">
                    <div class="no-variations">
                        Please select a product to view its variations.
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Variation Modal -->
    <div id="variationModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal()">&times;</span>
            <h3 id="modalTitle">Add New Variation</h3>
            <div id="modalMessages"></div>
            <form id="variationForm" enctype="multipart/form-data">
                <input type="hidden" id="variationId" name="variationID">
                <input type="hidden" id="productId" name="productID">
                
                <label for="variationIdDisplay">Variation ID:</label>
                <input type="text" id="variationIdDisplay" readonly>
                
                <label for="productNameDisplay">Product Name:</label>
                <input type="text" id="productNameDisplay" readonly>
                
                <label for="variationName">Variation Name: *</label>
                <input type="text" id="variationName" name="variationName" required>
                
                <label for="color">Color:</label>
                <input type="text" id="color" name="color" placeholder="e.g., White, Black, Red">
                
                <label for="quantity">Quantity: *</label>
                <input type="number" id="quantity" name="quantity" min="1" required>
                
                <label for="isActive">Status:</label>
                <select id="isActive" name="isActive">
                    <option value="1">Active</option>
                    <option value="0">Inactive</option>
                </select>
                
                <label for="variationImage">Variation Image:</label>
                <input type="file" id="variationImage" name="variationImage" accept="image/*">
                <div id="currentImagePreview" style="margin-top: 10px;"></div>
                
                <button type="submit" id="saveButton">Update Variation</button>
                <button type="button" onclick="closeModal()">Cancel</button>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteConfirmationModal" class="delete-confirmation-modal">
        <div class="delete-confirmation-content">
            <h3>Delete Variation</h3>
            <p id="deleteConfirmationText">Are you sure you want to delete this variation? This action cannot be undone.</p>
            <div class="delete-confirmation-buttons">
                <button class="delete-cancel-btn" id="cancelDelete">Cancel</button>
                <button class="delete-confirm-btn" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>

    <script>
        let currentProductId = null;
        let currentVariationId = null;

        // Load products on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadProducts();
        });

        // Load all products for the dropdown
        async function loadProducts() {
            try {
                const response = await fetch('/api/products');
                const data = await response.json();
                
                if (data.success && data.products) {
                    const select = document.getElementById('productSelect');
                    select.innerHTML = '<option value="">Choose a product...</option>';
                    
                    data.products.forEach(product => {
                        const option = document.createElement('option');
                        option.value = product.id;
                        option.textContent = `${product.name} (ID: ${product.id})`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading products:', error);
                showMessage('Error loading products', 'error');
            }
        }

        // Load variations for selected product
        async function loadVariations() {
            const productId = document.getElementById('productSelect').value;
            currentProductId = productId;
            
            if (!productId) {
                document.getElementById('variationsContent').innerHTML = 
                    '<div class="no-variations">Please select a product to view its variations.</div>';
                return;
            }

            try {
                document.getElementById('variationsContent').innerHTML = 
                    '<div class="loading">Loading variations...</div>';

                const response = await fetch(`/Employee/UserManager/UserVariations/Get/${productId}`);
                const data = await response.json();
                
                if (data.success) {
                    displayVariations(data.variations);
                } else {
                    throw new Error(data.message || 'Failed to load variations');
                }
            } catch (error) {
                console.error('Error loading variations:', error);
                document.getElementById('variationsContent').innerHTML = 
                    '<div class="error-message">Error loading variations: ' + error.message + '</div>';
            }
        }

        // Display variations in table
        function displayVariations(variations) {
            const content = document.getElementById('variationsContent');
            
            if (!variations || variations.length === 0) {
                content.innerHTML = '<div class="no-variations">No variations found for this product.</div>';
                return;
            }

            let tableHTML = `
                <table class="variations-table">
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Name</th>
                            <th>Color</th>
                            <th>Quantity</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            variations.forEach(variation => {
                const imageUrl = variation.VariationImageURL ? 
                    `<img src="${variation.VariationImageURL}" class="variation-image" alt="${variation.VariationName}">` : 
                    '<div class="variation-image" style="background: #f8f9fa; display: flex; align-items: center; justify-content: center; color: #6c757d;">No Image</div>';
                
                const status = variation.IsActive ? 
                    '<span style="color: #28a745;">Active</span>' : 
                    '<span style="color: #dc3545;">Inactive</span>';
                
                const createdDate = new Date(variation.CreatedAt).toLocaleDateString();

                tableHTML += `
                    <tr>
                        <td>${imageUrl}</td>
                        <td>${variation.VariationName}</td>
                        <td>${variation.Color || 'N/A'}</td>
                        <td>${variation.Quantity}</td>
                        <td>${status}</td>
                        <td>${createdDate}</td>
                        <td>
                            <div class="variation-actions">
                                <button class="btn-edit" onclick="editVariation(${variation.VariationID})">Edit</button>
                                <button class="btn-delete" onclick="deleteVariation(${variation.VariationID}, '${variation.VariationName}')">Delete</button>
                            </div>
                        </td>
                    </tr>
                `;
            });

            tableHTML += '</tbody></table>';
            content.innerHTML = tableHTML;
        }

        // Open add variation modal
        function openAddModal() {
            if (!currentProductId) {
                showMessage('Please select a product first', 'error');
                return;
            }

            document.getElementById('modalTitle').textContent = 'Add New Variation';
            document.getElementById('saveButton').textContent = 'Add Variation';
            document.getElementById('variationForm').reset();
            document.getElementById('variationId').value = '';
            document.getElementById('variationIdDisplay').value = '';
            document.getElementById('productId').value = currentProductId;
            
            // Set product name
            const productSelect = document.getElementById('productSelect');
            const selectedOption = productSelect.options[productSelect.selectedIndex];
            document.getElementById('productNameDisplay').value = selectedOption.textContent;
            
            document.getElementById('currentImagePreview').innerHTML = '';
            document.getElementById('modalMessages').innerHTML = '';
            document.getElementById('variationModal').style.display = 'block';
        }

        // Edit variation
        async function editVariation(variationId) {
            try {
                // Get variation data from the current table
                const response = await fetch(`/Employee/UserManager/UserVariations/Get/${currentProductId}`);
                const data = await response.json();
                
                if (data.success) {
                    const variation = data.variations.find(v => v.VariationID === variationId);
                    if (variation) {
                        document.getElementById('modalTitle').textContent = 'Edit Product Variation';
                        document.getElementById('saveButton').textContent = 'Update Variation';
                        document.getElementById('variationId').value = variation.VariationID;
                        document.getElementById('variationIdDisplay').value = variation.VariationID;
                        document.getElementById('productId').value = variation.ProductID;
                        document.getElementById('productNameDisplay').value = variation.ProductName;
                        document.getElementById('variationName').value = variation.VariationName;
                        document.getElementById('color').value = variation.Color || '';
                        document.getElementById('quantity').value = variation.Quantity;
                        document.getElementById('isActive').value = variation.IsActive ? '1' : '0';
                        
                        // Show current image if exists
                        const currentImagePreview = document.getElementById('currentImagePreview');
                        if (variation.VariationImageURL) {
                            currentImagePreview.innerHTML = `
                                <img src="${variation.VariationImageURL}" style="width: 80px; height: 80px; object-fit: cover; border-radius: 4px; border: 1px solid #ddd;" alt="Current variation image">
                            `;
                        } else {
                            currentImagePreview.innerHTML = `
                                <div style="width: 80px; height: 80px; background: #f8f9fa; display: flex; align-items: center; justify-content: center; color: #6c757d; font-size: 12px; border-radius: 4px; border: 1px solid #ddd;">
                                    No Image
                                </div>
                            `;
                        }
                        
                        document.getElementById('modalMessages').innerHTML = '';
                        document.getElementById('variationModal').style.display = 'block';
                    }
                }
            } catch (error) {
                console.error('Error loading variation for edit:', error);
                showMessage('Error loading variation data', 'error');
            }
        }

        // Delete variation - show confirmation modal
        function deleteVariation(variationId, variationName) {
            currentVariationId = variationId;
            document.getElementById('deleteConfirmationText').textContent = 
                `Are you sure you want to delete the variation "${variationName}"? This action cannot be undone.`;
            document.getElementById('deleteConfirmationModal').style.display = 'flex';
        }

        // Actually delete the variation
        async function confirmDeleteVariation() {
            if (!currentVariationId) return;

            try {
                const response = await fetch(`/Employee/UserManager/UserVariations/Delete/${currentVariationId}`, {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showMessage('Variation deleted successfully', 'success');
                    loadVariations(); // Reload the variations
                } else {
                    throw new Error(data.message || 'Failed to delete variation');
                }
            } catch (error) {
                console.error('Error deleting variation:', error);
                showMessage('Error deleting variation: ' + error.message, 'error');
            } finally {
                document.getElementById('deleteConfirmationModal').style.display = 'none';
                currentVariationId = null;
            }
        }

        // Close modal
        function closeModal() {
            document.getElementById('variationModal').style.display = 'none';
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('variationModal');
            if (event.target === modal) {
                closeModal();
            }
        }

        // Delete Confirmation Modal Logic
        const deleteConfirmationModal = document.getElementById('deleteConfirmationModal');
        const cancelDeleteBtn = document.getElementById('cancelDelete');
        const confirmDeleteBtn = document.getElementById('confirmDelete');

        // Cancel delete
        cancelDeleteBtn.addEventListener('click', function() {
            deleteConfirmationModal.style.display = 'none';
            currentVariationId = null;
        });

        // Confirm delete
        confirmDeleteBtn.addEventListener('click', function() {
            confirmDeleteVariation();
        });

        // Close delete modal when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === deleteConfirmationModal) {
                deleteConfirmationModal.style.display = 'none';
                currentVariationId = null;
            }
        });

        // Handle form submission
        document.getElementById('variationForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const isEdit = document.getElementById('variationId').value !== '';
            const url = isEdit ? '/Employee/UserManager/UserVariations/Edit' : '/Employee/UserManager/UserVariations/Add';
            
            
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showMessage(data.message || (isEdit ? 'Variation updated successfully' : 'Variation added successfully'), 'success');
                    closeModal();
                    loadVariations(); // Reload the variations
                } else {
                    throw new Error(data.message || 'Failed to save variation');
                }
            } catch (error) {
                console.error('Error saving variation:', error);
                showMessage('Error saving variation: ' + error.message, 'error');
            }
        });

        // Show message in modal
        function showMessage(message, type) {
            const messagesDiv = document.getElementById('modalMessages');
            const messageClass = type === 'error' ? 'error-message' : 'success-message';
            messagesDiv.innerHTML = `<div class="${messageClass}">${message}</div>`;
            
            // Auto-hide success messages
            if (type === 'success') {
                setTimeout(() => {
                    messagesDiv.innerHTML = '';
                }, 3000);
            }
        }

    </script>

    <!-- Custom Confirmation Modal -->
    <div id="logoutConfirmModal" class="modal-overlay">
        <div class="modal-content">
            <h3>Confirm Logout</h3>
            <p>Are you sure you want to log out?</p>
            <div class="modal-buttons">
                <button class="modal-button confirm" id="confirmLogoutBtn">Logout</button>
                <button class="modal-button cancel" id="cancelLogoutBtn">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        // Custom Logout Modal Logic
        const logoutConfirmModal = document.getElementById('logoutConfirmModal');
        const confirmLogoutBtn = document.getElementById('confirmLogoutBtn');
        const cancelLogoutBtn = document.getElementById('cancelLogoutBtn');

        async function handleLogout(event) {
            event.preventDefault();
            logoutConfirmModal.classList.add('show');
        }

        confirmLogoutBtn.addEventListener('click', async () => {
            logoutConfirmModal.classList.remove('show');
            try {
                const response = await fetch('/logout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    window.location.href = '/login';
                } else {
                    console.error('Logout failed');
                    alert('Failed to logout. Please try again.');
                }
            } catch (error) {
                console.error('Error during logout:', error);
                alert('An error occurred during logout. Please try again.');
            }
        });

        cancelLogoutBtn.addEventListener('click', () => {
            logoutConfirmModal.classList.remove('show');
        });

        // Close modal if clicked outside content
        logoutConfirmModal.addEventListener('click', (event) => {
            if (event.target === logoutConfirmModal) {
                logoutConfirmModal.classList.remove('show');
            }
        });
    </script>
        <script src="/js/dark-mode.js"></script>
</body>
</html>





