<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Variations - Inventory</title>
    <link rel="stylesheet" href="/css/Employee/Admin/AdminIndexStyles.css">
    <style>
        .variations-container {
            padding: 20px;
        }
        
        .variations-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e9ecef;
        }
        
        .variations-header h2 {
            margin: 0;
            color: #333;
        }
        
        .add-variation-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.3s;
        }
        
        .add-variation-btn:hover {
            background: #218838;
        }
        
        .product-selector {
            margin-bottom: 20px;
        }
        
        .product-selector select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }
        
        .variations-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .variations-table th,
        .variations-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }
        
        .variations-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #495057;
        }
        
        .variations-table tr:hover {
            background: #f8f9fa;
        }
        
        .variation-image {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 5px;
        }
        
        .variation-actions {
            display: flex;
            gap: 5px;
        }
        
        .btn-edit, .btn-delete {
            padding: 5px 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s;
        }
        
        .btn-edit {
            background: #007bff;
            color: white;
        }
        
        .btn-edit:hover {
            background: #0056b3;
        }
        
        .btn-delete {
            background: #dc3545;
            color: white;
        }
        
        .btn-delete:hover {
            background: #c82333;
        }
        
        .no-variations {
            text-align: center;
            padding: 40px;
            color: #6c757d;
            font-style: italic;
        }
        
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #e9ecef;
        }
        
        .modal-header h3 {
            margin: 0;
            color: #333;
        }
        
        .close {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: #000;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #333;
        }
        
        .form-group input,
        .form-group select {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }
        
        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid #e9ecef;
        }
        
        .btn-save, .btn-cancel {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .btn-save {
            background: #28a745;
            color: white;
        }
        
        .btn-save:hover {
            background: #218838;
        }
        
        .btn-cancel {
            background: #6c757d;
            color: white;
        }
        
        .btn-cancel:hover {
            background: #5a6268;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: #6c757d;
        }
        
        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
            border: 1px solid #f5c6cb;
        }
        
        .success-message {
            background: #d4edda;
            color: #155724;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
            border: 1px solid #c3e6cb;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>Inventory Panel</h3>
            </div>
            <ul class="sidebar-menu">
                <li class="sidebar-section-label" style="font-weight:normal;">Inventory</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/Inventory/InventoryProducts">Products</a></li>
                    <li><a href="/Employee/Inventory/InventoryVariations" class="active">Variations</a></li>
                    <li><a href="/Employee/Inventory/InventoryMaterials">Raw Materials</a></li>
                    <li><a href="/Employee/Inventory/InventoryAlerts">Alerts</a></li>
                    <li><a href="/Employee/Inventory/InventoryArchived">Archived items</a></li>
                </ul>
                <li class="sidebar-section-label" style="font-weight:normal;">Transactions</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/Inventory/InventoryRates">Delivery Rates</a></li>
                    <li><a href="/Employee/Inventory/InventoryWalkIn">Walk In</a></li>
                    <li><a href="/Employee/Inventory/InventoryOrdersPending">Orders Pending</a></li>
                    <li><a href="/Employee/Inventory/InventoryOrdersProcessing">Orders Processing</a></li>
                    <li><a href="/Employee/Inventory/InventoryOrdersShipping">Orders Shipping</a></li>
                    <li><a href="/Employee/Inventory/InventoryOrdersDelivery">Orders Delivery</a></li>
                    <li><a href="/Employee/Inventory/InventoryOrdersReceive">Orders Receive</a></li>
                    <li><a href="/Employee/Inventory/InventoryCancelledOrders">Cancelled Orders</a></li>
                    <li><a href="/Employee/Inventory/InventoryCompletedOrders">Completed Orders</a></li>
                </ul>
                <li><a href="/Employee/Inventory/InventoryManageUsers">Manage Users</a></li>
                <li><a href="/Employee/Inventory/InventoryChatSupport">Chat Support</a></li>
                <li><a href="/Employee/Inventory/InventoryCMS">Content Management</a></li>
                <li><a href="/Employee/Inventory/InventoryLogs">Activity Logs</a></li>
            </ul>
        </div>
        <div class="main-content">
            <div class="variations-container">
                <div class="variations-header">
                    <h2>Product Variations Management</h2>
                    <button class="add-variation-btn" onclick="openAddModal()">Add New Variation</button>
                </div>
                
                <div class="product-selector">
                    <label for="productSelect">Select Product:</label>
                    <select id="productSelect" onchange="loadVariations()">
                        <option value="">Choose a product...</option>
                    </select>
                </div>
                
                <div id="variationsContent">
                    <div class="no-variations">
                        Please select a product to view its variations.
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Variation Modal -->
    <div id="variationModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">Add New Variation</h3>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div id="modalMessages"></div>
            <form id="variationForm" enctype="multipart/form-data">
                <input type="hidden" id="variationId" name="variationID">
                <input type="hidden" id="productId" name="productID">
                
                <div class="form-group">
                    <label for="variationName">Variation Name *</label>
                    <input type="text" id="variationName" name="variationName" required>
                </div>
                
                <div class="form-group">
                    <label for="color">Color</label>
                    <input type="text" id="color" name="color" placeholder="e.g., Red, Blue, Black">
                </div>
                
                <div class="form-group">
                    <label for="quantity">Quantity *</label>
                    <input type="number" id="quantity" name="quantity" min="1" required>
                </div>
                
                <div class="form-group">
                    <label for="variationImage">Variation Image</label>
                    <input type="file" id="variationImage" name="variationImage" accept="image/*">
                    <div id="currentImage" style="margin-top: 10px;"></div>
                </div>
                
                <div class="form-group">
                    <label for="isActive">Status</label>
                    <select id="isActive" name="isActive">
                        <option value="1">Active</option>
                        <option value="0">Inactive</option>
                    </select>
                </div>
                
                <div class="modal-actions">
                    <button type="button" class="btn-cancel" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn-save">Save Variation</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let currentProductId = null;
        let currentVariationId = null;

        // Load products on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadProducts();
        });

        // Load all products for the dropdown
        async function loadProducts() {
            try {
                const response = await fetch('/api/products');
                const data = await response.json();
                
                if (data.success && data.products) {
                    const select = document.getElementById('productSelect');
                    select.innerHTML = '<option value="">Choose a product...</option>';
                    
                    data.products.forEach(product => {
                        const option = document.createElement('option');
                        option.value = product.id;
                        option.textContent = `${product.name} (ID: ${product.id})`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading products:', error);
                showMessage('Error loading products', 'error');
            }
        }

        // Load variations for selected product
        async function loadVariations() {
            const productId = document.getElementById('productSelect').value;
            currentProductId = productId;
            
            if (!productId) {
                document.getElementById('variationsContent').innerHTML = 
                    '<div class="no-variations">Please select a product to view its variations.</div>';
                return;
            }

            try {
                document.getElementById('variationsContent').innerHTML = 
                    '<div class="loading">Loading variations...</div>';

                const response = await fetch(`/Employee/Inventory/InventoryVariations/Get/${productId}`);
                const data = await response.json();
                
                if (data.success) {
                    displayVariations(data.variations);
                } else {
                    throw new Error(data.message || 'Failed to load variations');
                }
            } catch (error) {
                console.error('Error loading variations:', error);
                document.getElementById('variationsContent').innerHTML = 
                    '<div class="error-message">Error loading variations: ' + error.message + '</div>';
            }
        }

        // Display variations in table
        function displayVariations(variations) {
            const content = document.getElementById('variationsContent');
            
            if (!variations || variations.length === 0) {
                content.innerHTML = '<div class="no-variations">No variations found for this product.</div>';
                return;
            }

            let tableHTML = `
                <table class="variations-table">
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Name</th>
                            <th>Color</th>
                            <th>Quantity</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            variations.forEach(variation => {
                const imageUrl = variation.VariationImageURL ? 
                    `<img src="${variation.VariationImageURL}" class="variation-image" alt="${variation.VariationName}">` : 
                    '<div class="variation-image" style="background: #f8f9fa; display: flex; align-items: center; justify-content: center; color: #6c757d;">No Image</div>';
                
                const status = variation.IsActive ? 
                    '<span style="color: #28a745;">Active</span>' : 
                    '<span style="color: #dc3545;">Inactive</span>';
                
                const createdDate = new Date(variation.CreatedAt).toLocaleDateString();

                tableHTML += `
                    <tr>
                        <td>${imageUrl}</td>
                        <td>${variation.VariationName}</td>
                        <td>${variation.Color || 'N/A'}</td>
                        <td>${variation.Quantity}</td>
                        <td>${status}</td>
                        <td>${createdDate}</td>
                        <td>
                            <div class="variation-actions">
                                <button class="btn-edit" onclick="editVariation(${variation.VariationID})">Edit</button>
                                <button class="btn-delete" onclick="deleteVariation(${variation.VariationID}, '${variation.VariationName}')">Delete</button>
                            </div>
                        </td>
                    </tr>
                `;
            });

            tableHTML += '</tbody></table>';
            content.innerHTML = tableHTML;
        }

        // Open add variation modal
        function openAddModal() {
            if (!currentProductId) {
                showMessage('Please select a product first', 'error');
                return;
            }

            document.getElementById('modalTitle').textContent = 'Add New Variation';
            document.getElementById('variationForm').reset();
            document.getElementById('variationId').value = '';
            document.getElementById('productId').value = currentProductId;
            document.getElementById('currentImage').innerHTML = '';
            document.getElementById('modalMessages').innerHTML = '';
            document.getElementById('variationModal').style.display = 'block';
        }

        // Edit variation
        async function editVariation(variationId) {
            try {
                // Get variation data from the current table
                const response = await fetch(`/Employee/Inventory/InventoryVariations/Get/${currentProductId}`);
                const data = await response.json();
                
                if (data.success) {
                    const variation = data.variations.find(v => v.VariationID === variationId);
                    if (variation) {
                        document.getElementById('modalTitle').textContent = 'Edit Variation';
                        document.getElementById('variationId').value = variation.VariationID;
                        document.getElementById('productId').value = variation.ProductID;
                        document.getElementById('variationName').value = variation.VariationName;
                        document.getElementById('color').value = variation.Color || '';
                        document.getElementById('quantity').value = variation.Quantity;
                        document.getElementById('isActive').value = variation.IsActive ? '1' : '0';
                        
                        // Show current image if exists
                        const currentImageDiv = document.getElementById('currentImage');
                        if (variation.VariationImageURL) {
                            currentImageDiv.innerHTML = `
                                <p>Current Image:</p>
                                <img src="${variation.VariationImageURL}" style="max-width: 100px; max-height: 100px; border-radius: 4px;">
                            `;
                        } else {
                            currentImageDiv.innerHTML = '<p>No current image</p>';
                        }
                        
                        document.getElementById('modalMessages').innerHTML = '';
                        document.getElementById('variationModal').style.display = 'block';
                    }
                }
            } catch (error) {
                console.error('Error loading variation for edit:', error);
                showMessage('Error loading variation data', 'error');
            }
        }

        // Delete variation
        async function deleteVariation(variationId, variationName) {
            if (!confirm(`Are you sure you want to delete the variation "${variationName}"?`)) {
                return;
            }

            try {
                const response = await fetch(`/Employee/Inventory/InventoryVariations/Delete/${variationId}`, {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showMessage('Variation deleted successfully', 'success');
                    loadVariations(); // Reload the variations
                } else {
                    throw new Error(data.message || 'Failed to delete variation');
                }
            } catch (error) {
                console.error('Error deleting variation:', error);
                showMessage('Error deleting variation: ' + error.message, 'error');
            }
        }

        // Close modal
        function closeModal() {
            document.getElementById('variationModal').style.display = 'none';
        }

        // Handle form submission
        document.getElementById('variationForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const isEdit = document.getElementById('variationId').value !== '';
            const url = isEdit ? '/Employee/Inventory/InventoryVariations/Edit' : '/Employee/Inventory/InventoryVariations/Add';
            
            // Debug: Log form data
            console.log('AdminVariations - Form data being sent:');
            for (let [key, value] of formData.entries()) {
                console.log(key, value);
            }
            console.log('isEdit:', isEdit, 'url:', url);
            
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                console.log('AdminVariations - Backend response:', data);
                
                if (data.success) {
                    showMessage(data.message || (isEdit ? 'Variation updated successfully' : 'Variation added successfully'), 'success');
                    closeModal();
                    loadVariations(); // Reload the variations
                } else {
                    throw new Error(data.message || 'Failed to save variation');
                }
            } catch (error) {
                console.error('Error saving variation:', error);
                showMessage('Error saving variation: ' + error.message, 'error');
            }
        });

        // Show message in modal
        function showMessage(message, type) {
            const messagesDiv = document.getElementById('modalMessages');
            const messageClass = type === 'error' ? 'error-message' : 'success-message';
            messagesDiv.innerHTML = `<div class="${messageClass}">${message}</div>`;
            
            // Auto-hide success messages
            if (type === 'success') {
                setTimeout(() => {
                    messagesDiv.innerHTML = '';
                }, 3000);
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('variationModal');
            if (event.target === modal) {
                closeModal();
            }
        }
    </script>
</body>
</html>
