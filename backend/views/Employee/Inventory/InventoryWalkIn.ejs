<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Walk In - Inventory</title>
    <link rel="stylesheet" href="/css/Employee/Admin/AdminIndexStyles.css">
</head>
<body>
    <div class="dashboard-container">
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>Inventory Panel</h3>
            </div>
            <ul class="sidebar-menu">
                <li class="sidebar-section-label" style="font-weight:normal;">Inventory</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/Inventory/InventoryProducts">Products</a></li>
                    <li><a href="/Employee/Inventory/InventoryMaterials">Raw Materials</a></li>
                    <li><a href="/Employee/Inventory/InventoryAlerts">Alerts</a></li>
                    <li><a href="/Employee/Inventory/InventoryArchived">Archived items</a></li>
                </ul>
                <li class="sidebar-section-label" style="font-weight:normal;">Transactions</li>
                <ul class="sidebar-submenu" style="display:block;">
                    <li><a href="/Employee/Inventory/InventoryRates">Delivery Rates</a></li>
                    <li><a href="/Employee/Inventory/InventoryWalkIn">Walk In</a></li>
                    <li><a href="/Employee/Inventory/InventoryOrdersPending">Orders Pending</a></li>
                    <li><a href="/Employee/Inventory/InventoryOrdersProcessing">Orders Processing</a></li>
                    <li><a href="/Employee/Inventory/InventoryOrdersShipping">Orders Shipping</a></li>
                    <li><a href="/Employee/Inventory/InventoryOrdersDelivery">Orders Delivery</a></li>
                    <li><a href="/Employee/Inventory/InventoryOrdersReceive">Orders Receive</a></li>
                    <li><a href="/Employee/Inventory/InventoryCancelledOrders">Cancelled Orders</a></li>
                    <li><a href="/Employee/Inventory/InventoryCompletedOrders">Completed Orders</a></li>
                </ul>
                <li><a href="/Employee/Inventory/InventoryManageUsers">Manage Users</a></li>
                <li><a href="/Employee/Inventory/InventoryChatSupport">Chat Support</a></li>
                <li><a href="/Employee/Inventory/InventoryCMS">Content Management</a></li>
                <li><a href="/Employee/Inventory/InventoryLogs">Activity Logs</a></li>
            </ul>
        </div>
        <div class="main-content">
            <div class="header">
                <h2>Walk In</h2>
            </div>
            <div class="content-area">
                <% if (error) { %>
                    <div class="error-message"><%= error %></div>
                <% } %>
                <button id="toggleNewBulkForm" style="background:#f59e0b;color:#111;border:none;border-radius:6px;padding:10px 14px;font-weight:700;margin-bottom:12px;">New Walk In</button>
                <form id="simpleBulkForm" action="/Employee/Inventory/InventoryWalkIn/Add" method="POST" style="display:none;background:#fff;padding:16px;border-radius:8px;border:1px solid #e5e7eb;margin-bottom:18px;">
                    <div style="display:grid;grid-template-columns:1fr 1fr;gap:12px;margin-bottom:10px;">
                        <div>
                            <label>Customer Name</label>
                            <input type="text" name="customerName" required style="width:100%;padding:8px;border:1px solid #ccc;border-radius:4px;">
                        </div>
                        <div>
                            <label>Contact Number</label>
                            <input type="text" name="contactNumber" style="width:100%;padding:8px;border:1px solid #ccc;border-radius:4px;">
                        </div>
                        <div>
                            <label>Contact Email</label>
                            <input type="email" name="contactEmail" style="width:100%;padding:8px;border:1px solid #ccc;border-radius:4px;">
                        </div>
                        <div>
                            <label>Discount</label>
                            <input type="number" name="discount" step="0.01" value="0" style="width:100%;padding:8px;border:1px solid #ccc;border-radius:4px;">
                        </div>
                        <div style="grid-column:1 / -1;">
                            <label>Address</label>
                            <textarea name="address" rows="2" style="width:100%;padding:8px;border:1px solid #ccc;border-radius:4px;"></textarea>
                        </div>
                        <div>
                            <label>Delivery Type</label>
                            <select name="deliveryType" id="deliveryType" style="width:100%;padding:8px;border:1px solid #ccc;border-radius:4px;">
                                <option value="pickup">Pickup</option>
                                <option value="delivery">Delivery</option>
                            </select>
                        </div>
                        <div id="etaField" style="display:none;">
                            <label>Expected Arrival</label>
                            <input type="datetime-local" name="expectedArrival" style="width:100%;padding:8px;border:1px solid #ccc;border-radius:4px;">
            </div>
        </div>

                    <div style="background:#f8fafc;border:1px solid #e5e7eb;border-radius:8px;padding:12px;margin-bottom:12px;">
                        <div style="display:flex;align-items:center;gap:8px;margin-bottom:8px;">
                            <strong>Products</strong>
                            <button type="button" id="addProductBtn" style="background:#10b981;color:#fff;border:none;border-radius:4px;padding:6px 10px;font-weight:600;">Add</button>
                        </div>
                        <div id="productsList" style="display:flex;flex-direction:column;gap:8px;"></div>
            </div>
            
                    <input type="hidden" name="orderedProducts" id="orderedProductsField" />
                    <div style="display:flex;align-items:center;gap:12px;flex-wrap:wrap;">
                        <div><label>Subtotal:</label> <span id="subtotalDisplay">₱0.00</span></div>
                        <div><label>Discount:</label> <span id="discountDisplay">0%</span></div>
                        <div><label>Grand Total:</label> <span id="grandTotalDisplay">₱0.00</span></div>
                        <input type="hidden" name="totalAmount" id="totalAmountField" />
                    </div>
                    <div style="margin-top:12px;display:flex;gap:8px;">
                        <button type="submit" style="background:#2563eb;color:#fff;border:none;border-radius:6px;padding:10px 16px;font-weight:600;">Create Walk In</button>
                        <button type="button" id="cancelSimpleForm" style="background:#6b7280;color:#fff;border:none;border-radius:6px;padding:10px 16px;font-weight:600;">Cancel</button>
                    </div>
                </form>

                <h3>Walk In</h3>
                <div style="display:flex;flex-wrap:wrap;gap:16px;">
                    <% (bulkOrders || []).forEach(function(order){ %>
                        <div style="background:#fff;border:1px solid #e5e7eb;border-radius:8px;padding:14px;min-width:320px;max-width:420px;flex:1 1 320px;">
                            <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px;">
                                <div style="font-weight:700;">#<%= order.BulkOrderID %> - <%= order.CustomerName %></div>
                                <span style="background:#f3f4f6;border:1px solid #e5e7eb;border-radius:14px;padding:2px 10px;font-size:.9em;"><%= order.Status %></span>
                    </div>
                            <div style="font-size:.95em;color:#444;margin-bottom:6px;">Total: ₱<%= Number(order.TotalAmount).toLocaleString(undefined,{minimumFractionDigits:2}) %> (Disc: ₱<%= Number(order.Discount||0).toLocaleString(undefined,{minimumFractionDigits:2}) %>)</div>
                            <div style="font-size:.9em;color:#666;margin-bottom:6px;">Type: <%= order.DeliveryType === 'delivery' ? 'Delivery' : 'Pickup' %> | ETA: <%= order.ExpectedArrival ? new Date(order.ExpectedArrival).toLocaleString() : '-' %> | Completed: <%= order.CompletedAt ? new Date(order.CompletedAt).toLocaleString() : '-' %></div>
                            <div style="font-size:.9em;color:#666;margin-bottom:6px;">Contact: <%= order.ContactNumber || '-' %> | <%= order.ContactEmail || '-' %></div>
                            <div style="font-size:.9em;color:#666;margin-bottom:6px;">Address: <%= order.Address || '-' %></div>
                            <details style="margin:6px 0;">
                                <summary style="cursor:pointer;">View Ordered Products</summary>
                                <% let __items = []; try { __items = JSON.parse(order.OrderedProducts || '[]'); } catch(e) { __items = []; } %>
                                <% if ((__items||[]).length) { %>
                                    <div style="overflow:auto;margin-top:6px;">
                                        <table style="width:100%;border-collapse:collapse;background:#f8fafc;border:1px solid #e5e7eb;border-radius:6px;">
                                            <thead>
                                                <tr style="background:#f3f4f6;">
                                                    <th style="text-align:left;padding:6px 8px;border-bottom:1px solid #e5e7eb;">Product</th>
                                                    <th style="text-align:right;padding:6px 8px;border-bottom:1px solid #e5e7eb;">Unit Price</th>
                                                    <th style="text-align:center;padding:6px 8px;border-bottom:1px solid #e5e7eb;">Qty</th>
                                                    <th style="text-align:right;padding:6px 8px;border-bottom:1px solid #e5e7eb;">Total</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% __items.forEach(function(it){ %>
                                                    <tr>
                                                        <td style="padding:6px 8px;border-bottom:1px solid #e5e7eb;"><%= (it.name||'').replace(/\s*\(Stock:.*\)$/,'') %></td>
                                                        <td style="padding:6px 8px;text-align:right;border-bottom:1px solid #e5e7eb;">₱<%= Number(it.unitPrice||0).toLocaleString(undefined,{minimumFractionDigits:2}) %></td>
                                                        <td style="padding:6px 8px;text-align:center;border-bottom:1px solid #e5e7eb;"><%= it.quantity %></td>
                                                        <td style="padding:6px 8px;text-align:right;border-bottom:1px solid #e5e7eb;">₱<%= Number((it.unitPrice||0)*(it.quantity||0)).toLocaleString(undefined,{minimumFractionDigits:2}) %></td>
                                                    </tr>
                                                <% }) %>
                                            </tbody>
                                        </table>
                </div>
                                <% } else { %>
                                    <div style="white-space:pre-wrap;background:#f8fafc;border:1px solid #e5e7eb;border-radius:6px;padding:8px;margin-top:6px;color:#666;">No items</div>
                                <% } %>
                            </details>
                            <div style="display:flex;gap:8px;margin-top:8px;">
                                <% if (order.Status === 'Processing') { %>
                                    <% if (order.DeliveryType === 'pickup') { %>
                                        <button class="bo-complete" data-id="<%= order.BulkOrderID %>" style="background:#3b82f6;color:#fff;border:none;border-radius:6px;padding:8px 12px;font-weight:600;">Mark Completed</button>
                                    <% } else { %>
                                        <button class="bo-proceed" data-id="<%= order.BulkOrderID %>" style="background:#10b981;color:#fff;border:none;border-radius:6px;padding:8px 12px;font-weight:600;">Mark On delivery</button>
                                    <% } %>
                                <% } %>
                                <% if (order.Status === 'On delivery') { %>
                                    <button class="bo-complete" data-id="<%= order.BulkOrderID %>" style="background:#3b82f6;color:#fff;border:none;border-radius:6px;padding:8px 12px;font-weight:600;">Mark Completed</button>
                                <% } %>
            </div>
        </div>
                    <% }) %>
                    <% if (!bulkOrders || bulkOrders.length === 0) { %>
                        <div style="color:#888;">No walk in orders yet.</div>
                    <% } %>
    </div>

                <!-- Remove old modal styles and modal HTML -->

    <script>
                (function(){
                    const simpleForm = document.getElementById('simpleBulkForm');
                    const toggleBtn = document.getElementById('toggleNewBulkForm');
                    const closeBtn = document.getElementById('closeSimpleForm');
                    const cancelBtn = document.getElementById('cancelSimpleForm');
                    const addProductBtn = document.getElementById('addProductBtn');
                    const productsList = document.getElementById('productsList');
                    const discountInput = document.querySelector('input[name="discount"]');
                    const subtotalDisplay = document.getElementById('subtotalDisplay');
                    const discountDisplay = document.getElementById('discountDisplay');
                    const grandTotalDisplay = document.getElementById('grandTotalDisplay');
                    const orderedProductsField = document.getElementById('orderedProductsField');
                    const totalAmountField = document.getElementById('totalAmountField');
                    
                    let products = [];
                    let productRows = [];

                    // Function to fetch products from various endpoints
                    async function fetchProducts(){
                        const endpoints = ['/api/walkin/products', '/api/products', '/api/inventory/products'];
                        console.log('Trying to fetch products from:', endpoints);
                        
                        for (let endpoint of endpoints) {
                            try {
                                console.log('Attempting endpoint:', endpoint);
                                const res = await fetch(endpoint);
                                console.log('Response status:', res.status);
                                
                                if (!res.ok) {
                                    console.log('Endpoint failed:', endpoint, 'Status:', res.status);
                                    continue;
                                }
                                
                                const data = await res.json();
                                console.log('Response data:', data);
                                
                                if (data && (data.success || Array.isArray(data.products) || Array.isArray(data.items) || Array.isArray(data))) {
                                    products = Array.isArray(data) ? data : (data.products || data.items || []);
                                    // Normalize to unified shape expected by the UI
                                    products = (products || []).map(p => ({
                                        ProductID: p.ProductID ?? p.id ?? p.productId ?? p.Id,
                                        Name: p.Name ?? p.name,
                                        Price: p.Price ?? p.price ?? p.unitPrice,
                                        StockQuantity: p.StockQuantity ?? p.stock ?? p.quantity ?? 0
                                    }));
                                    console.log('Products loaded:', products.length, 'products');
                                    break;
                                }
                            } catch(e) { 
                                console.log('Error fetching from', endpoint, ':', e);
                                continue;
                            }
                        }
                        
                        console.log('Final products array:', products);
                    }

                    // Show/hide form
                    if (toggleBtn) {
                        toggleBtn.addEventListener('click', function() {
                            simpleForm.style.display = 'block';
                            fetchProducts();
                        });
                    }

                    if (closeBtn) {
                        closeBtn.addEventListener('click', function() {
                            simpleForm.style.display = 'none';
                            resetForm();
                        });
                    }

                    if (cancelBtn) {
                        cancelBtn.addEventListener('click', function() {
                            simpleForm.style.display = 'none';
                            resetForm();
                        });
                    }

                    // Add product row
                    if (addProductBtn) {
                        addProductBtn.addEventListener('click', function() {
                            addProductRow();
                        });
                    }

                    function addProductRow() {
                        if (products.length === 0) {
                            alert('Please wait for products to load...');
                return;
            }
            
                        const rowId = Date.now();
                        const rowDiv = document.createElement('div');
                        rowDiv.id = `row-${rowId}`;
                        rowDiv.style.cssText = `
                            background: white;
                            border: 1px solid #e5e7eb;
                            border-radius: 8px;
                            padding: 15px;
                            position: relative;
                        `;

                        rowDiv.innerHTML = `
                            <div style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr auto; gap: 12px; align-items: center;">
                                <div>
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #333; font-size: 12px;">Product</label>
                                    <select class="product-select" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;">
                                        <option value="">Select product...</option>
                                        ${products.map(p => `<option value="${p.ProductID}" data-price="${p.Price}" data-stock="${p.StockQuantity}">${p.Name} (Stock: ${p.StockQuantity})</option>`).join('')}
                                    </select>
                                </div>
                                
                                <div>
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #333; font-size: 12px;">Quantity</label>
                                    <input type="number" class="quantity-input" min="1" value="1" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;">
                                </div>
                                
                                <div>
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #333; font-size: 12px;">Unit Price</label>
                                    <input type="text" class="price-display" readonly style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; background: #f8fafc; text-align: center;">
                                </div>
                                
                                <div>
                                    <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #333; font-size: 12px;">Total</label>
                                    <input type="text" class="total-display" readonly style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; background: #f8fafc; text-align: center;">
                                </div>
                                
                                <div style="align-self: end;">
                                    <button type="button" class="remove-row-btn" style="background: #dc3545; color: white; border: none; border-radius: 4px; padding: 6px 10px; font-size: 12px; cursor: pointer;">Remove</button>
                        </div>
                    </div>
                `;

                        // Add event listeners
                        const select = rowDiv.querySelector('.product-select');
                        const quantity = rowDiv.querySelector('.quantity-input');
                        const priceDisplay = rowDiv.querySelector('.price-display');
                        const totalDisplay = rowDiv.querySelector('.total-display');
                        const removeBtn = rowDiv.querySelector('.remove-row-btn');

                        select.addEventListener('change', function() {
                            const selectedOption = this.options[this.selectedIndex];
                            if (selectedOption.value) {
                                const price = parseFloat(selectedOption.dataset.price);
                                const stock = parseInt(selectedOption.dataset.stock);
                                priceDisplay.value = currency(price);
                                
                                if (quantity.value > stock) {
                                    quantity.value = stock;
                                }
                                quantity.max = stock;
                                
                                updateRowTotal();
                            } else {
                                priceDisplay.value = '';
                                totalDisplay.value = '';
                            }
                        });

                        quantity.addEventListener('input', updateRowTotal);

                        function updateRowTotal() {
                            const selectedOption = select.options[select.selectedIndex];
                            if (selectedOption.value && quantity.value) {
                                const price = parseFloat(selectedOption.dataset.price);
                                const qty = parseInt(quantity.value);
                                totalDisplay.value = currency(price * qty);
                                calculateTotals();
                            }
                        }

                        removeBtn.addEventListener('click', function() {
                            rowDiv.remove();
                            calculateTotals();
                        });

                        productsList.appendChild(rowDiv);
                        productRows.push({ id: rowId, element: rowDiv });
                        calculateTotals();
                    }

                    function calculateTotals() {
                        let subtotal = 0;
                        const rows = [...productsList.children];
                        const list = [];

                        rows.forEach(row => {
                            const select = row.querySelector('.product-select');
                            const quantity = row.querySelector('.quantity-input');
                            
                            if (select && select.value) {
                                const selectedOption = select.options[select.selectedIndex];
                                if (selectedOption && selectedOption.value) {
                                    const unit = parseFloat(selectedOption.dataset.price || 0);
                                    const q = parseInt(quantity.value || 0);
                                    subtotal += unit * q;
                                    list.push({ 
                                        productId: Number(selectedOption.value), 
                                        name: selectedOption.textContent, 
                                        unitPrice: unit, 
                                        quantity: q 
                                    });
                                }
                            }
                        });

                        const discountPercent = parseFloat(discountInput.value || 0);
                        const discountAmount = subtotal * (discountPercent / 100);
                        const grandTotal = subtotal - discountAmount;

                        subtotalDisplay.textContent = currency(subtotal);
                        discountDisplay.textContent = currency(discountAmount);
                        grandTotalDisplay.textContent = currency(grandTotal);
                        
                        orderedProductsField.value = JSON.stringify(list);
                        totalAmountField.value = grandTotal.toFixed(2);
                    }

                    function currency(n) { 
                        return '₱' + Number(n || 0).toLocaleString(undefined, { minimumFractionDigits: 2 }); 
                    }

                    function resetForm() {
                        productsList.innerHTML = '';
                        productRows = [];
                        calculateTotals();
                        document.querySelector('form').reset();
                    }

                    // Discount input change
                    if (discountInput) {
                        discountInput.addEventListener('input', calculateTotals);
                    }

                    // Form submission
                    const form = document.querySelector('form');
                    if (form) {
                        form.addEventListener('submit', function(e) {
                            calculateTotals();
                            if (!orderedProductsField.value || orderedProductsField.value === '[]') {
                                e.preventDefault();
                                alert('Please add at least one product.');
                            }
                        });
                    }

                    // Initial fetch of products
                    fetchProducts();

                    // Walk in order action buttons
                    document.querySelectorAll('.bo-proceed').forEach(btn => {
                        btn.addEventListener('click', function() {
                            const id = this.getAttribute('data-id');
                            fetch(`/Employee/Inventory/InventoryWalkIn/ProceedToDelivery/${id}`, { method: 'POST' })
                                .then(r => r.json()).then(d => { 
                                    if(d.success) location.reload(); 
                                    else alert('Update failed'); 
                                });
                        });
                    });

                    document.querySelectorAll('.bo-complete').forEach(btn => {
                        btn.addEventListener('click', function() {
                            const id = this.getAttribute('data-id');
                            fetch(`/Employee/Inventory/InventoryWalkIn/Complete/${id}`, { method: 'POST' })
                                .then(r => r.json()).then(d => { 
                                    if(d.success) location.reload(); 
                                    else alert('Update failed'); 
                                });
                        });
                    });

                    // Handle delivery type change
                    const deliveryTypeSelect = document.getElementById('deliveryType');
                    const etaField = document.getElementById('etaField');
                    if (deliveryTypeSelect && etaField) {
                        deliveryTypeSelect.addEventListener('change', function() {
                            if (this.value === 'delivery') {
                                etaField.style.display = 'block';
                            } else {
                                etaField.style.display = 'none';
                            }
                        });
                    }
                })();
    </script>
            </div>
        </div>
    </div>
</body>
</html>
